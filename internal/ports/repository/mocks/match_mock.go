// Code generated by mockery v2.32.3. DO NOT EDIT.

package mocks

import (
	model "github.com/brcodingdev/cloudwalk-parser/internal/pkg/model"
	mock "github.com/stretchr/testify/mock"
)

// Match is an autogenerated mocks type for the Match type
type Match struct {
	mock.Mock
}

// Add provides a mocks function with given fields: match
func (_m *Match) Add(match *model.Match) error {
	ret := _m.Called(match)

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.Match) error); ok {
		r0 = rf(match)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindAll provides a mocks function with given fields:
func (_m *Match) FindAll() ([]model.Match, error) {
	ret := _m.Called()

	var r0 []model.Match
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]model.Match, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []model.Match); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Match)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMatch creates a new instance of Match. It also registers a testing interface on the mocks and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMatch(t interface {
	mock.TestingT
	Cleanup(func())
}) *Match {
	mock := &Match{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
